#!/usr/bin/perl

use strict;
use warnings;
use Carp;
use English;
use LifeGraphs qw(write_file :defaults);
use Data::Dumper;
use DateTime;

# verify data directory
my $data_dir = verify_datadir();
chdir("$data_dir/../Dash") or croak "couldn't get to Dash directory: $ERRNO"; 

# defaults

my $content =
"Steam Achievements
==================
 
";

# retrieve existing data
my $steam_storable_filename = 'steam.storable';
my $data = get_storable("$data_dir/$steam_storable_filename",1);

my $steam_percents_storable_filename = 'steam_percents.storable';
my $steam_percents_json_filename = 'steam_percents.json';
my $percent_data = get_storable("$data_dir/$steam_percents_storable_filename",1);

my $steam_games_storable_filename = 'steam_games.storable';
my $steam_games_json_filename = 'steam_games.json';
my $games_data = get_storable("$data_dir/$steam_games_storable_filename",1);

my $lastday;
my $lastday_statsday;
foreach my $day ( sort keys %{ $data } ) { 
	next unless $day =~ /^\d+-\d+-\d+/;
	my $day_obj = parse_statsday($day);
	my $unix_seconds = $day_obj->epoch();
	#die "$day $day_obj $unix_seconds\n";

	$lastday = $data->{$day};
	$lastday_statsday = $day;
	#my $metric = $data->{$day}->{Achievements};
}

# today's Steam achievment completion
my $steam_completion = $lastday->{'Avg. Game Completion Rate'};
my $steam_completion_show = $steam_completion;
$steam_completion =~ s/%$//;
$steam_completion *= .01;

my $game_details = $lastday->{game_details};

my $total_games = scalar keys %$game_details;
my $has_achievements = 0;
my @games_with_achievements;

foreach my $game (sort keys %$game_details) {
	my $this_game = $game_details->{$game};
	if ( defined ( $this_game->{achievements_total} ) ) {
		$has_achievements++;
		my $achievements_total = $this_game->{achievements_total};
		my $achievements_current = $this_game->{achievements_current};
		my $achieved_percentage = $achievements_current/$achievements_total;
		$this_game->{perc} = $achieved_percentage;
		$this_game->{name} = $game;
		push (@games_with_achievements,$this_game);
	}
}

$content .= "$has_achievements out of $total_games games have achievements.\n";

my $table_content .= "| Percentage Complete | Done / Total | Game -> store | Game -> achievements | Hours Played | Hours per Achievement |\n";
$table_content    .= "| ------------------: | :----------: | ----------- | ------------------ | -----------: | --------------------: |\n";

#print Dumper(\@games_with_achievements);
# descending percentage then ascending name
my @sorted_games = sort {
		   $b->{perc} <=> $a->{perc}					# desc
		or ( $b->{hrs_total} || 0 )   <=>   ( $a->{hrs_total} || 0 )	# desc
		or $a->{name} cmp $b->{name}					# ascend
	} @games_with_achievements;
my $perc_accumulator;
my $played_perc_accumulator;
my $played_count;
my $showed_imperfect_percentage = 0;
my $showed_steam_percentage = 0;
my $showed_zero_percentage = 0;
my $showed_ever_played = 0;

foreach my $game (@sorted_games) {
	my $perc = $game->{perc};
	my $display_perc = sprintf("%.1f%%",$perc*100);
	my $hours = $game->{hrs_total} || 0;

	if ($perc < 1 and ! $showed_imperfect_percentage ) {
		$table_content .= "|  | | | **Achievements Available** | | |\n";
		$showed_imperfect_percentage = 1;
	}

	if ($perc < $steam_completion and ! $showed_steam_percentage ) {
		$table_content .= "| $steam_completion_show | | | **Steam Completion Average** | | |\n";
		$showed_steam_percentage = 1;
	}

	if ($perc == 0 and ! $showed_zero_percentage ) {
		$table_content .= "| 0% | | | **No Achievements** | | |\n";
		$showed_zero_percentage = 1;
	}

	if ($showed_zero_percentage and ! $showed_ever_played and $hours == 0) {
		$table_content .= "| 0% | | | **Never Played** | | |\n";
		$showed_ever_played = 1;
	}

	my $name = $game->{name};
	my $last_played = $game->{last_played};
	my $achievements_current = $game->{achievements_current};
	my $achievements_total = $game->{achievements_total};
	my $display_achievements = "$achievements_current / $achievements_total";

	$perc_accumulator += $perc;
	if ($hours) {
		$played_count++;
		$played_perc_accumulator += $perc;
	}
	my $display_hours = $hours;
	if ($hours > 10) {
		$display_hours = "**$hours**";
	}

	my $display_name = '';
	my $url_achievements = $games_data->{$name}->{url_achievements};
	my $url_logo = $games_data->{$name}->{url_logo};
	my $url_store = $games_data->{$name}->{url_store};
	$display_name .= "[ ![logo links to store]($url_logo) ]($url_store) ";
	$display_name .= "| [$name]($url_achievements)";

	my $achieve_efficiency;
	if ($hours and $achievements_current) {
		$achieve_efficiency = $hours/$achievements_current;
		$achieve_efficiency = sprintf("%.2f",$achieve_efficiency);

		# emphasize
		if ($achieve_efficiency < .5) {
			$achieve_efficiency = "**$achieve_efficiency**";
		} elsif ($achieve_efficiency < 1.5) {
			$achieve_efficiency = "*$achieve_efficiency*";
#		} else {
#			$achieve_efficiency = "$achieve_efficiency"
		}
	} else {
		$achieve_efficiency = 'und';
	}

	$table_content .= "| $display_perc | $display_achievements | $display_name | $display_hours | $achieve_efficiency |\n";
}
$table_content .= "\n\n";

my $overall_perc = 100 * $perc_accumulator / $total_games;
my $raw_overall_perc = $overall_perc / 100;
$overall_perc = sprintf("%.2f",$overall_perc);

my $played_perc = 100 * $played_perc_accumulator / $played_count;
my $raw_played_perc = $played_perc / 100;
$played_perc = sprintf("%.2f",$played_perc);

$content .= "$overall_perc% achieved overall. $played_perc% achieved in games played.\n\n";
$content .= "\n\n";
$content .= $table_content;
$content .= "\n\n";
$content .= "links\n-----\n";
$content .= "[Steam Dashboard](Steam.md) ...\n";
$content .= "[Main Dashboard](README.md) ...\n\n";

# write table out as Markdown
my $filename = "steam_achievements.md";
write_file($filename,$content);  
print "wrote Dash/$filename\n";

# save percentages as JSON/Storable
my $log_day = {
	"chicks_overall_percent" => $raw_overall_perc,
	"chicks_played_percent" => $raw_played_perc,
};
$percent_data->{$lastday_statsday} = $log_day;

chdir($data_dir) or croak "couldn't get to $data_dir directory: $ERRNO"; 
write_json($steam_percents_json_filename,$percent_data);
write_storable($steam_percents_storable_filename,$percent_data);
 
