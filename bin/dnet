#!/usr/bin/perl

use strict;
use warnings;
#use diagnostics;
use LWP::Simple qw(get);
use HTML::TreeBuilder;
use Data::Dumper;
use DateTime;
use JSON;
use Storable qw(nstore retrieve);
use Readonly;

# verify data directory
my $data_dir = $ENV{STATS_DIR};
die "no STATS_DIR defined" unless defined $data_dir;
die "$data_dir is not a directory" unless -d $data_dir;
chdir($data_dir) or die "somehow failed to chdir($data_dir): $!";

# retrieve existing data
my $dnet_storable_filename = 'dnet.storable';
my $dnet_json_filename = 'dnet.json';
my $data_out = {};

if (-f $dnet_storable_filename) {
	print "starting with $data_dir/$dnet_storable_filename\n";
	$data_out = retrieve $dnet_storable_filename;
}

# global constants
Readonly::Hash my %month_decode => (
	'Jan' => 1, 'Feb' => 2, 'Mar' => 3, 'Apr' => 4,
	'May' => 5, 'Jun' => 6, 'Jul' => 7, 'Aug' => 8,
	'Sep' => 9, 'Oct' => 10, 'Nov' => 11, 'Dec' => 12,
	'Sept' => 9, 'July' => 7, 'June' => 6,
);

# get content: rc5-72 summary
my $rc5_url = 'http://stats.distributed.net/participant/psummary.php?project_id=8&id=73444';
my $raw_html = get($rc5_url);
my $raw_length = length $raw_html;
print "got $raw_length bytes from $rc5_url\n";

# parse
my $tree = HTML::TreeBuilder->new; # empty tree
$tree->parse_content($raw_html);

# get stats currency timestamp
my $stats_time;
{
	my $stats_date_td = $tree->look_down('_tag' => 'td', 'class' => 'lastupdate');
	my $stats_date_text = $stats_date_td->as_text;
	if ($stats_date_text =~ /received as of ([\w-]+) at ([0-9:]+) UTC/) {
		my $date = $1;
		my $time = $2;

		my ($day,$month,$year) = split(/-/,$date);
		my ($hour,$minute) = split(/:/,$time);
		$month = date2month($date) or die "no month decode for '$month', cannot make a date out of '$date'";

		my $stats_date_object = DateTime->new(
			year      => $year,
			month     => $month,
			day       => $day,
			hour      => $hour,
			minute    => $minute,
			second    => 0,
			time_zone => 'UTC',
		);

		$stats_time = $stats_date_object->format_cldr("yyyy-MM-dd HH:mm");
		print "parsing rc5-72 $stats_time ...\n";
	} else {
		die "could not parse current stats date out of <<<$stats_date_text>>>";
	}
}

# get data
my @rows = $tree->look_down(
		'_tag' => 'td',
		'class' => 'phead2',
		'align' => 'left',
);
my $row_count = scalar @rows;
#print "found $row_count rows\n";

foreach my $row_title (@rows) {
#	print $row_title->dump;
	my $dnet_out = {};

	my $row_title_text = $row_title->as_text;
	my @fields = $row_title->right();

	if ($row_title_text =~ /^Rank:/) {
		my $rank_overall = $fields[0];
		my $rank_yesterday = $fields[1];

		my $rank_overall_text = $rank_overall->as_text;
		my $rank_yesterday_text = $rank_yesterday->as_text;

		my $rank_overall_delta = $rank_overall_text;
		my $rank_yesterday_delta = $rank_yesterday_text;

		$rank_overall_delta =~ s/^.*\(//;
		$rank_yesterday_delta =~ s/^.*\(//;
		$rank_overall_delta =~ s/\)$//;
		$rank_yesterday_delta =~ s/\)$//;
		$rank_overall_text =~ s/\(.*$//;
		$rank_yesterday_text =~ s/\(.*$//;
		$rank_overall_text =~ s/^\s+//;
		$rank_yesterday_text =~ s/^\s+//;

		my $overall_img = $rank_overall->look_down(_tag => 'img');
		my $yesterday_img = $rank_yesterday->look_down(_tag => 'img');
		$rank_overall_delta = $overall_img->attr('alt') . $rank_overall_delta;
		$rank_yesterday_delta = $yesterday_img->attr('alt') . $rank_yesterday_delta;

		#print "\tposi. overall:$rank_overall_text yesterday:$rank_yesterday_text\n";
		#print "\tdelta overall:$rank_overall_delta yesterday:$rank_yesterday_delta\n";

		$data_out->{'rc5-72'}->{$stats_time}->{rank} = {
			'overall' => $rank_overall_text,
			'yesterday' => $rank_yesterday_text,
		};
		$data_out->{'rc5-72'}->{$stats_time}->{rank_delta} = {
			'overall' => $rank_overall_delta,
			'yesterday' => $rank_yesterday_delta,
		};
	} elsif ($row_title_text =~ /^Time Working:/) {
		my $time_working = $fields[0]->as_text;
		$time_working =~ s/,//g;
		$time_working =~ s/^\s+//;
		$time_working =~ s/\s+$//;
		$data_out->{'rc5-72'}->{$stats_time}->{time_working} = $time_working;
		#print "\tdays worked:$time_working\n";
	} elsif ($row_title_text =~ /^Blocks:/) {
		my $blocks_overall = $fields[0]->as_text;
		my $blocks_yesterday = $fields[1]->as_text;

		$blocks_overall =~ s/,//g;
		$blocks_yesterday =~ s/,//g;

		#print "\tblocks overall:$blocks_overall yesterday:$blocks_yesterday\n";

		$data_out->{'rc5-72'}->{$stats_time}->{blocks} = {
			'overall' => $blocks_overall,
			'yesterday' => $blocks_yesterday,
		};
	} elsif ($row_title_text =~ /^Keys:/) {
		my $keys_overall = $fields[0]->as_text;
		my $keys_yesterday = $fields[1]->as_text;

		$keys_overall =~ s/,//g;
		$keys_yesterday =~ s/,//g;

		#print "\tkeys overall:$keys_overall yesterday:$keys_yesterday\n";

		$data_out->{'rc5-72'}->{$stats_time}->{keys} = {
			'overall' => $keys_overall,
			'yesterday' => $keys_yesterday,
		};
	} elsif ($row_title_text =~ /^Keys\/sec:/) {
		my $keyrate_overall = $fields[0]->as_text;
		my $keyrate_yesterday = $fields[1]->as_text;

		$keyrate_overall =~ s/,//g;
		$keyrate_yesterday =~ s/,//g;
		$keyrate_overall =~ s/^\s+//;
		$keyrate_yesterday =~ s/^\s+//;
		$keyrate_overall =~ s/\s+$//;
		$keyrate_yesterday =~ s/\s+$//;

		#print "\tkeyrate overall:$keyrate_overall yesterday:$keyrate_yesterday\n";

		$data_out->{'rc5-72'}->{$stats_time}->{keyrate} = {
			'overall' => $keyrate_overall,
			'yesterday' => $keyrate_yesterday,
		};
	} elsif ($row_title_text =~ /^Blocks\/sec:/) {
		# don't care
	} elsif ($row_title_text =~ /^Percentile:/) {
		my $percentile_overall = $fields[0]->as_text;
		my $percentile_yesterday = $fields[1]->as_text;

		$percentile_overall =~ s/^\s+//;
		$percentile_yesterday =~ s/^\s+//;
		$percentile_overall =~ s/\s+$//;
		$percentile_yesterday =~ s/\s+$//;

		#print "\tpercentile overall:$percentile_overall yesterday:$percentile_yesterday\n";

		$data_out->{'rc5-72'}->{$stats_time}->{percentile} = {
			'overall' => $percentile_overall,
			'yesterday' => $percentile_yesterday,
		};
	} else {
		print "UNHANDLED $row_title_text:\n";
		foreach my $fld_element (@fields) {
			print "\t\t", $fld_element->as_text(), "\n";
		}
	}
}

# get content: rc5-72 history
my $rc5_history_url = 'http://stats.distributed.net/participant/phistory.php?project_id=8&id=73444';
$raw_html = get($rc5_history_url);
$raw_length = length $raw_html;
print "got $raw_length bytes from $rc5_history_url\n";

# parse
$tree = HTML::TreeBuilder->new; # empty tree
$tree->parse_content($raw_html);

@rows = $tree->look_down(
		'_tag' => 'tr',
		'class' => qr/^row[12]$/,
);

$row_count = scalar @rows;
#print "found $row_count rows\n";

my $rc5_blocks_total;
foreach my $row (@rows) {
	my @cells = $row->look_down('_tag' => 'td');
	my ($date,$blocks) = map {$_->as_text} @cells;

	my ($day,$month,$year) = split(/-/,$date);
	$month = date2month($date) or die "no month decode for '$month', cannot make a date out of '$date'";

	my $iso_date = sprintf("%04d-%02d-%02d",$year,$month,$day);

	$blocks =~ s/,//g;

	$rc5_blocks_total += $blocks;

#	print "$date\t$iso_date\t$blocks\n";
	$data_out->{'rc5-72'}->{'block_history'}->{$iso_date} = $blocks;
}

my $summary_rc5_blocks = $data_out->{'rc5-72'}->{$stats_time}->{'blocks'}->{'overall'};
if ($rc5_blocks_total == $summary_rc5_blocks) {
	print "crosscheck GOOD: history and summary show $rc5_blocks_total RC5-72 blocks done.\n";
} else {
	print "crosscheck FAIL: history shows $rc5_blocks_total RC5-72 blocks done but the summary said $summary_rc5_blocks are done.\n";
}

# write Storable
#print Dumper($data_out);
nstore $data_out,$dnet_storable_filename;
print "wrote $dnet_storable_filename\n";

# write JSON file
my $json_fh;
open($json_fh,">",$dnet_json_filename) or die "could not open $dnet_json_filename for write: $!";
my $json = JSON->new->allow_nonref;
my $json_out = $json->pretty->canonical->encode($data_out);
print $json_fh $json_out;
close($json_fh);
print "wrote $dnet_json_filename\n";

sub date2month {
	my ($date) = @_;
	my ($day,$month,$year) = split(/-/,$date);
	if (defined $month_decode{$month}) {
		return $month_decode{$month};
	} else {
		return undef;
	}
}
