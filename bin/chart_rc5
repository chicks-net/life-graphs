#!/usr/bin/perl

use strict;
use warnings;
use Carp;
use English;
use LifeGraphs qw(write_file :defaults);
use Data::Dumper;
use DateTime;
use Chart::Strip;

# verify data directory
my $data_dir = verify_datadir();
chdir("$data_dir/../Dash") or croak "couldn't get to Dash directory: $ERRNO"; 

# defaults
my $chart_width = 850;
my @color_set = @{ color_set('fini1') };
#die Dumper(\@color_set);

# retrieve existing data
my $dnet_storable_filename = 'dnet.storable';
my $data = get_storable("$data_dir/$dnet_storable_filename",1);

my @data_rank_yesterday;
my @data_rank_overall;
my @data_delta_yesterday;
my @data_delta_overall;
my @data_blocks_yesterday;

foreach my $day ( sort keys %{ $data->{'rc5-72'} } ) { 
	next unless $day =~ /^\d+-\d+-\d+/;
	my $day_obj = parse_statsday($day);
	my $unix_seconds = $day_obj->epoch();
	#print "$day $day_obj $unix_seconds\n";

	my $metric = $data->{'rc5-72'}->{$day}->{rank_delta}->{yesterday};
#	print "rank_delta.yesterday $metric $unix_seconds\n";
	my $data_item = { time => $unix_seconds, value => $metric };
	push (@data_delta_yesterday, $data_item);

	$metric = $data->{'rc5-72'}->{$day}->{rank_delta}->{overall};
#	print "rank_delta.overall $metric $unix_seconds\n";
	$data_item = { time => $unix_seconds, value => $metric };
	push (@data_delta_overall, $data_item);


	$metric = $data->{'rc5-72'}->{$day}->{rank}->{yesterday};
#	print "rank.yesterday $metric $unix_seconds\n";
	$data_item = { time => $unix_seconds, value => $metric };
	push (@data_rank_yesterday, $data_item);

	$metric = $data->{'rc5-72'}->{$day}->{rank}->{overall};
#	print "rank.overall $metric $unix_seconds\n";
	$data_item = { time => $unix_seconds, value => $metric };
	push (@data_rank_overall, $data_item);


	my $days_ago = $day_obj->delta_days( DateTime->now() )->in_units('days');
	$metric = $data->{'rc5-72'}->{$day}->{blocks}->{yesterday};
#	print "blocks.yesterday $metric $unix_seconds $days_ago\n";
	$data_item = { time => $unix_seconds, value => $metric };
	push (@data_blocks_yesterday, $data_item)
		if ($days_ago < 326);

}

my $chart = Chart::Strip->new( title => "chicks rc5-72 rank", width => $chart_width, height => 300 );
$chart->add_data(\@data_rank_overall, { style => 'line', label => 'Overall', color => $color_set[1] });
$chart->add_data(\@data_rank_yesterday, { style => 'line', label => 'Yesterday', color => $color_set[2] });
my $filename = "rank_rc5-72_chicks.png";
write_file($filename, $chart->png(), 'Dash');

$chart = Chart::Strip->new( title => "chicks rc5-72 rank delta", width => $chart_width );
my @data_delta10_overall = map { $_->{value} = 10 * $_->{value} ; $_ } @data_delta_overall;
$chart->add_data(\@data_delta10_overall, { style => 'line', label => 'Overall * 10', thickness => 2, color => $color_set[1] });
$chart->add_data(\@data_delta_yesterday, { style => 'line', label => 'Yesterday', color => $color_set[2] });
$filename = "rank_delta_rc5-72_chicks.png";
write_file($filename, $chart->png(), 'Dash');

print "blocks_yesterday " . scalar(@data_blocks_yesterday) . "\n";
$chart = Chart::Strip->new( title => "chicks rc5-72 blocks", width => $chart_width );
$chart->add_data(\@data_blocks_yesterday, { style => 'line', label => 'Yesterday', color => $color_set[3] });
$filename = "blocks_rc5-72_chicks.png";
write_file($filename, $chart->png(), 'Dash');

my $block_history =  $data->{'rc5-72'}->{block_history};
my @block_history = map {
		my $day_obj = parse_statsday($_ . ' 0:0');
		my $secs = $day_obj->epoch();
		{ time => $secs, value => $block_history->{$_} };
	} sort keys %$block_history;
$chart = Chart::Strip->new( title => "chicks rc5-72 blocks forever", width => $chart_width );
$chart->add_data(\@block_history, { style => 'line', label => 'rc5-72', color => $color_set[3] });
$filename = "block_history_rc5-72_chicks.png";
write_file($filename,$chart->png(), 'Dash');
