#!/usr/bin/perl

use strict;
use warnings;
#use diagnostics;
use Data::Dumper;
use DateTime;
use LifeGraphs;
#use Readonly;
#use utf8;
use File::Slurp qw(read_file);
use LWP::Simple qw(get);
use Statistics::Basic qw(median);

# verify data directory
my $data_dir = verify_datadir();

# retrieve existing data
my $steam_storable_filename = 'steam.storable';
my $steam_json_filename = 'steam.json';
my $data_out = get_storable("$data_dir/$steam_storable_filename");
my $steam_games_storable_filename = 'steam_games.storable';
my $steam_games_json_filename = 'steam_games.json';
my $games_data = get_storable("$data_dir/$steam_games_storable_filename");

# accept UTF8 on stdout
binmode STDOUT, ":utf8";

# use secrets
my $secrets_file = "$data_dir/../etc/secrets.json";
my $steam_api;
if (-f $secrets_file) {
	my $raw_json = read_file($secrets_file);
	my $json = JSON->new->allow_nonref; # no html fiddling, brilliant!
	my $secrets = $json->decode($raw_json);

	if ( defined( $secrets->{secrets}->{steamapi} ) ) {
		$steam_api = $secrets->{secrets}->{steamapi};
	} else {
		print "INFO: no steam API key available\n";
	}
} else {
	print "INFO: no secrets file, so no steam API key available\n";
}


#
# get content: steam profile
#
my $steam_id = '76561198037662755';
my $profile_url = 'http://steamcommunity.com/profiles/76561198037662755';
my $tree = url_tree($profile_url);

my $stats_time = DateTime->now->format_cldr("yyyy-MM-dd HH:mm");

#
# get right column data
#
my $right_column_count = 0;
my $item_links_div = $tree->look_down(
		'_tag' => 'div',
		'class' => 'profile_item_links',
);
my @rows = $item_links_div->look_down(
		'_tag' => 'div',
		'class' => 'profile_count_link ellipsis',
);
foreach my $row (@rows) {
	my $textified = $row->as_text;
	$textified = trim($textified);
	my ($label,$value) = split( /\s+/, $textified);
	next unless defined $value;
	#print "## $label => $value\n";
	
	$right_column_count++;
	$data_out->{$stats_time}->{$label} = $value;
}

unless ($right_column_count) {
	print "### WARNING: NO right column data retrieved\n";
}

#
# get recent game activity summary
#
my $rga_div = $tree->look_down(
		'_tag' => 'div',
		'class' => 'recentgame_quicklinks recentgame_recentplaytime',
);

my $rga_text = trim($rga_div->as_text);
$data_out->{$stats_time}->{'recent_game_activity'} = $rga_text;

#
# get player level
#
my $level_span = $tree->look_down(
		'_tag' => 'span',
		'class' => 'friendPlayerLevelNum',
);

my $level_text = trim($level_span->as_text);
$data_out->{$stats_time}->{'steam_level'} = $level_text;

#
# get recent game activity details
#

@rows = $tree->look_down(
		'_tag' => 'div',
		'class' => 'recent_game',
);

foreach my $row (@rows) {
	my $game_name_div = $row->look_down('_tag' => 'div', 'class' => 'game_name');
	my $game_name = $game_name_div->as_text;
	#print "RGA $game_name\n";

	my @recent_achievements = $row->look_down('_tag' => 'div', 'class' => 'game_info_achievement');
	my @recent_achievements_text = map { $_->attr('data-community-tooltip') } @recent_achievements;
	#print Dumper(\@recent_achievements_text);
	next unless scalar @recent_achievements_text;
	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'recent_achievements'} = [@recent_achievements_text];

	my $achievement_progress_div = $row->look_down('_tag' => 'span', 'class' => 'game_info_achievement_summary');
	my $achievement_progress = $achievement_progress_div->as_text;
	if ($achievement_progress =~ /(\d+) of (\d+)/) {
		$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_current'} = $1;
		$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_total'} = $2;
	} else {
		print "$game_name $achievement_progress\n";
	}
}

#
# get showcase stats
#
@rows = $tree->look_down(
		'_tag' => 'div',
		'class' => 'showcase_content_bg showcase_stats_row',
);
foreach my $row (@rows) {
	my (@kv_pairs) = $row->look_down('_tag' => 'div', 'class' => 'value');
	foreach my $pair (@kv_pairs) {
		my $label = $pair->right();
		my $label_text = trim($label->as_text);
		my $value_text = trim($pair->as_text);
	#	print "$label_text => $value_text\n";
		$data_out->{$stats_time}->{$label_text} = $value_text;
	}
}

#
# get overall game details
#

my $games_url = $profile_url . '/games?tab=all';
$tree = url_tree($games_url);

print "~ individual game details:::\n";

my ($game_count,$achievement_game_count);
@rows = $tree->look_down(
		'_tag' => 'script',
);
foreach my $row (@rows) {
	my $js = $row->as_HTML;
	if ($js =~ /var rgGames = ([^;]+);/) {
		my $raw_json = $1;
		my $json = JSON->new->allow_nonref; # no html fiddling, brilliant!
		my $games = $json->decode($raw_json);
#		print Dumper($games); die "foo";
		foreach my $game (@$games) {
			my $game_name = $game->{'name'};
			$game_count++;

			my $hours_forever = $game->{'hours_forever'};
			if ( defined $hours_forever ) {
				$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'hrs_total'} = $hours_forever;
				#print "$hours_forever hrs in $game_name\n";
			}

			my $last_played = $game->{'last_played'};
			if ( defined $last_played ) {
				$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'last_played'} = $last_played;
				#my $when = DateTime->from_epoch(epoch => $last_played);
				#print "$when $game_name\n";
			}

			my $app_id = $game->{appid};
			my $stats_links = $game->{'availStatLinks'};
			my $name_short = $game->{friendlyURL};
			my $url_achievements = "http://steamcommunity.com/stats/$name_short/achievements/compare/";
			my($hardest,$median);
			if ( defined $stats_links ) {
				my @keys = keys %$stats_links;
#				print Dumper($stats_links),"\n";
				if ( $stats_links->{achievements} ) {
					game_achievements($game_name,$name_short,$app_id);
					$achievement_game_count++;
					($hardest,$median) = game_difficulty($url_achievements);
				} else {
					#print "$game_name does not have achievements\n";
				}
			} else {
				print "no stats links for $game_name\n";
			}


			# store game metadata
			my $this_game = {
				name => $game_name,
				name_short => $name_short,
				app_id => $app_id,
				url_logo => $game->{logo},
				url_store =>"http://store.steampowered.com/app/$app_id/",
				url_achievements => $url_achievements,
			};

			if (defined $hardest) {
				$this_game->{ 'achievement_hardest' } = $hardest;
				$this_game->{ 'achievement_median' } = $median;
			}

			if ( defined $stats_links ) {
				my @keys = keys %$stats_links;
#				print Dumper($stats_links),"\n";
				foreach my $key (@keys) {
					if ( $stats_links->{$key} ) {
						$this_game->{ $key } = $stats_links->{ $key };
					}
				}
			}

			$games_data->{$game_name} = $this_game;
		}
	}
}
print "$achievement_game_count games have achievements out of $game_count games\n";

sub game_achievements {
	my ($game_name,$friendly_url,$appid) = @_;

	my $json = JSON->new->allow_nonref; # factory

	my $achievements_url = "$profile_url/stats/$friendly_url/?tab=achievements";

	my $quiet = 1;
	my $tree = url_tree($achievements_url,$quiet);

	my $achievements_earned = 0;
	my $achievements_total = 0;

	my $summary_div = $tree->look_down(
			'_tag' => 'div',
			'id' => 'topSummaryAchievements',
	);
	my $summary_raw;
	if ( defined $summary_div ) {
		$summary_raw = $summary_div->as_text;
	} else {
		# TF2 is special
		my $summary_div = $tree->look_down(
				'_tag' => 'div',
				'class' => 'achievementStatusText',
		);
		if ( defined $summary_div ) {
			$summary_raw = $summary_div->as_text;
		} else {
			if (defined $steam_api) {
				my $game_schema_url = "http://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=${steam_api}&appid=$appid";
				my $game_schema_json = get($game_schema_url);

				my $schema = $json->decode($game_schema_json);

				return unless defined $schema->{"game"}->{"availableGameStats"}->{"achievements"};
				print "!!! [$appid] '$game_name' has no achievements I can find BUT THE STEAM API DOES\n";

			} else {
				print "--- [$appid] '$game_name' has no achievements I can find\n";
			}
			return;
		}
	}
	if ( $summary_raw =~ /(\d+) of (\d+)/ ) {
		$achievements_earned = $1;
		$achievements_total = $2;
		#print "$game_name: $1/$2\n";
	} else {
		die "could not find achievement info for $game_name in '$summary_raw' "
	}

	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_current'} = $achievements_earned;
	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_total'} = $achievements_total;

#	print "$game_name: $achievements_earned/$achievements_total\n";

	# missing achievements (where some are left and some have been earned)
	if ( $achievements_total - $achievements_earned and $achievements_earned) {
		if ( defined $steam_api ) {
			print "finding missing achievements for $game_name\n";
			# get player details
			my $player_achievements_url = "http://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v0001/?appid=${appid}&key=${steam_api}&steamid=${steam_id}&l=en";
			my $player_achievements_json = get($player_achievements_url);
			my $player_achievements = $json->decode($player_achievements_json);
			#print Dumper($player_achievements);

			#  'playerstats' -> 'achievements' 
			my @player_achievements = @{$player_achievements->{playerstats}->{achievements}};
			my %player_achievements;
			foreach my $achievement (@player_achievements) {
				my $name = $achievement->{apiname};
				$player_achievements{$name} = $achievement;
			}

			# get global achievement percentages
			my $game_achievements_url = "http://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v0002/?gameid=${appid}&format=json";
			my $game_achievements_json = get($game_achievements_url);
			my $game_achievements = $json->decode($game_achievements_json);
			#print Dumper($game_achievements);

			my @game_achievements = @{$game_achievements->{achievementpercentages}->{achievements}};
			foreach my $achievement (@game_achievements) {
				my $apiname = $achievement->{name};
				my $percent = $achievement->{percent};
				if ( defined($player_achievements{$apiname}) ) {
					$player_achievements{$apiname}->{percent} = $percent;
				} else {
					#print "$game_name/$apiname (${percent}%) is a hidden achievement\n";
				}
			}

			my @missing_achievements_unsorted;
			foreach my $apiname (keys %player_achievements) {
				unless ($player_achievements{$apiname}->{achieved}) {
					push(@missing_achievements_unsorted,$player_achievements{$apiname});
				}
			}
			my @missing_achievements_sorted = sort {
					$b->{percent} <=> $a->{percent}
				} @missing_achievements_unsorted;
			# print Dumper(\@missing_achievements_sorted);
			$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'missing_achievements'} = \@missing_achievements_sorted;
		} else {
			print "!!! no missing achievements without SteamAPI access\n";
		}
	} else {
		# print "skipping $game_name with no achievements\n";
	}
}

sub game_difficulty {
	my ($url_achievements) = @_;

	my $quiet = 1;
	my $tree = url_tree($url_achievements,$quiet);

	my $hardest = .99;
	my @percentages;

	my @achievements = $tree->look_down(
			'_tag' => 'div',
			'class' => 'achieveRow ',
	);

	foreach my $achievement_div (@achievements) {
		my $percentage_div = $achievement_div->look_down(
			'_tag' => 'div',
			'class' => 'achievePercent',
		);
		my $percentage_text = trim($percentage_div->as_text);
		$percentage_text =~ s/%$//; # kill trailing %
		my $percentage = $percentage_text / 100;
		push(@percentages,$percentage);

		$hardest = $percentage if $percentage < $hardest;

		my $title_h3 = $achievement_div->look_down( '_tag' => 'h3' );
		my $achievement_title = trim($title_h3->as_text);
		#print "$achievement_title $percentage\n";
	}
	my $median;
	if (scalar @percentages) {
		$median = median(@percentages) + 0;
	} else {
		$median = 'undef';
	}

	return($hardest,$median);
}



#
# TODO: get achievement details
#

#my $row_count = scalar @rows;
#print "found $row_count rows\n";

if (0) {
	print Dumper($data_out->{$stats_time}), "\n";
	die "how does it look?";
}
if (0) {
	die "debug";
}

# Steam history
write_storable($steam_storable_filename,$data_out);
write_json($steam_json_filename,$data_out);

# game metadata
write_storable($steam_games_storable_filename,$games_data);
write_json($steam_games_json_filename,$games_data);
