#!/usr/bin/perl

use strict;
use warnings;
#use diagnostics;
use Data::Dumper;
use DateTime;
use LifeGraphs;
#use Readonly;
#use utf8;
use File::Slurp qw(read_file);
use LWP::Simple qw(get);

# verify data directory
my $data_dir = verify_datadir();

# retrieve existing data
my $steam_storable_filename = 'steam.storable';
my $steam_json_filename = 'steam.json';
my $data_out = get_storable("$data_dir/$steam_storable_filename");
my $steam_games_storable_filename = 'steam_games.storable';
my $steam_games_json_filename = 'steam_games.json';
my $games_data = get_storable("$data_dir/$steam_games_storable_filename");

# accept UTF8 on stdout
binmode STDOUT, ":utf8";

# use secrets
my $secrets_file = "$data_dir/../etc/secrets.json";
my $steam_api;
if (-f $secrets_file) {
	my $raw_json = read_file($secrets_file);
	my $json = JSON->new->allow_nonref; # no html fiddling, brilliant!
	my $secrets = $json->decode($raw_json);

	if ( defined( $secrets->{secrets}->{steamapi} ) ) {
		$steam_api = $secrets->{secrets}->{steamapi};
	} else {
		print "INFO: no steam API key available\n";
	}
} else {
	print "INFO: no secrets file, so no steam API key available\n";
}


#
# get content: steam profile
#
my $profile_url = 'http://steamcommunity.com/profiles/76561198037662755';
my $tree = url_tree($profile_url);

my $stats_time = DateTime->now->format_cldr("yyyy-MM-dd HH:mm");

#
# get right column data
#
my $item_links_div = $tree->look_down(
		'_tag' => 'div',
		'class' => 'profile_item_links',
);
my @rows = $item_links_div->look_down(
		'_tag' => 'div',
		'class' => 'profile_count_link',
);
foreach my $row (@rows) {
	my $textified = $row->as_text;
	$textified = trim($textified);
	my ($label,$value) = split( /\s+/, $textified);
	next unless defined $value;
	#print "## $label => $value\n";
	
	$data_out->{$stats_time}->{$label} = $value;
}

#
# get recent game activity summary
#
my $rga_div = $tree->look_down(
		'_tag' => 'div',
		'class' => 'recentgame_quicklinks recentgame_recentplaytime',
);

my $rga_text = trim($rga_div->as_text);
$data_out->{$stats_time}->{'recent_game_activity'} = $rga_text;

#
# get player level
#
my $level_span = $tree->look_down(
		'_tag' => 'span',
		'class' => 'friendPlayerLevelNum',
);

my $level_text = trim($level_span->as_text);
$data_out->{$stats_time}->{'steam_level'} = $level_text;

#
# get recent game activity details
#

@rows = $tree->look_down(
		'_tag' => 'div',
		'class' => 'recent_game',
);

foreach my $row (@rows) {
	my $game_name_div = $row->look_down('_tag' => 'div', 'class' => 'game_name');
	my $game_name = $game_name_div->as_text;
	#print "RGA $game_name\n";

	my @recent_achievements = $row->look_down('_tag' => 'div', 'class' => 'game_info_achievement');
	my @recent_achievements_text = map { $_->attr('data-community-tooltip') } @recent_achievements;
	#print Dumper(\@recent_achievements_text);
	next unless scalar @recent_achievements_text;
	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'recent_achievements'} = [@recent_achievements_text];

	my $achievement_progress_div = $row->look_down('_tag' => 'span', 'class' => 'game_info_achievement_summary');
	my $achievement_progress = $achievement_progress_div->as_text;
	if ($achievement_progress =~ /(\d+) of (\d+)/) {
		$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_current'} = $1;
		$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_total'} = $2;
	} else {
		print "$game_name $achievement_progress\n";
	}
}

#
# get showcase stats
#
@rows = $tree->look_down(
		'_tag' => 'div',
		'class' => 'showcase_content_bg showcase_stats_row',
);
foreach my $row (@rows) {
	my (@kv_pairs) = $row->look_down('_tag' => 'div', 'class' => 'value');
	foreach my $pair (@kv_pairs) {
		my $label = $pair->right();
		my $label_text = trim($label->as_text);
		my $value_text = trim($pair->as_text);
	#	print "$label_text => $value_text\n";
		$data_out->{$stats_time}->{$label_text} = $value_text;
	}
}

#
# get overall game details
#

my $games_url = $profile_url . '/games?tab=all';
$tree = url_tree($games_url);

print "~ individual game details:::\n";

my ($game_count,$achievement_game_count);
@rows = $tree->look_down(
		'_tag' => 'script',
);
foreach my $row (@rows) {
	my $js = $row->as_HTML;
	if ($js =~ /var rgGames = ([^;]+);/) {
		my $raw_json = $1;
		my $json = JSON->new->allow_nonref; # no html fiddling, brilliant!
		my $games = $json->decode($raw_json);
#		print Dumper($games); die "foo";
		foreach my $game (@$games) {
			my $game_name = $game->{'name'};
			$game_count++;

			my $hours_forever = $game->{'hours_forever'};
			if ( defined $hours_forever ) {
				$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'hrs_total'} = $hours_forever;
				#print "$hours_forever hrs in $game_name\n";
			}

			my $last_played = $game->{'last_played'};
			if ( defined $last_played ) {
				$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'last_played'} = $last_played;
				#my $when = DateTime->from_epoch(epoch => $last_played);
				#print "$when $game_name\n";
			}

			my $app_id = $game->{appid};
			my $stats_links = $game->{'availStatLinks'};
			if ( defined $stats_links ) {
				my @keys = keys %$stats_links;
#				print Dumper($stats_links),"\n";
				if ( $stats_links->{achievements} ) {
					#print "$game_name has achievements\n";
					my $friendly_url = $game->{'friendlyURL'};
					game_achievements($game_name,$friendly_url,$app_id);
					$achievement_game_count++;
				} else {
					#print "$game_name does not have achievements\n";
				}
			} else {
				print "no stats links for $game_name\n";
			}

			my $name_short = $game->{friendlyURL};

			# store game metadata
			my $this_game = {
				name => $game_name,
				name_short => $name_short,
				app_id => $app_id,
				url_logo => $game->{logo},
				url_store =>"http://store.steampowered.com/app/$app_id/",
				url_achievements =>"http://steamcommunity.com/stats/$name_short/achievements/compare/",
			};

			if ( defined $stats_links ) {
				my @keys = keys %$stats_links;
#				print Dumper($stats_links),"\n";
				foreach my $key (@keys) {
					if ( $stats_links->{$key} ) {
						$this_game->{ $key } = $stats_links->{ $key };
					}
				}
			}

			$games_data->{$game_name} = $this_game;
		}
	}
}
print "$achievement_game_count games have achievements out of $game_count games\n";

sub game_achievements {
	my ($game_name,$friendly_url,$appid) = @_;

	my $achievements_url = "$profile_url/stats/$friendly_url/?tab=achievements";
	my $quiet = 1;
	my $tree = url_tree($achievements_url,$quiet);

	my $achievements_earned = 0;
	my $achievements_total = 0;

	my $summary_div = $tree->look_down(
			'_tag' => 'div',
			'id' => 'topSummaryAchievements',
	);
	my $summary_raw;
	if ( defined $summary_div ) {
		$summary_raw = $summary_div->as_text;
	} else {
		# TF2 is special
		my $summary_div = $tree->look_down(
				'_tag' => 'div',
				'class' => 'achievementStatusText',
		);
		if ( defined $summary_div ) {
			$summary_raw = $summary_div->as_text;
		} else {
			if (defined $steam_api) {
				my $game_schema_url = "http://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=${steam_api}&appid=$appid";
				my $game_schema_json = get($game_schema_url);

				my $json = JSON->new->allow_nonref;
				my $schema = $json->decode($game_schema_json);

#				print "$game_schema_url\n";
#				print "$game_schema_json\n";
#				print Dumper($schema);
#				die "TODOing";

				return unless defined $schema->{"game"}->{"availableGameStats"}->{"achievements"};
				print "!!! [$appid] '$game_name' has no achievements I can find BUT THE STEAM API DOES\n";

			} else {
				print "--- [$appid] '$game_name' has no achievements I can find\n";
			}
			return;
		}
	}
	if ( $summary_raw =~ /(\d+) of (\d+)/ ) {
		$achievements_earned = $1;
		$achievements_total = $2;
		#print "$game_name: $1/$2\n";
	} else {
		die "could not find achievement info for $game_name in '$summary_raw' "
	}

	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_current'} = $achievements_earned;
	$data_out->{$stats_time}->{'game_details'}->{$game_name}->{'achievements_total'} = $achievements_total;

#	print "$game_name: $achievements_earned/$achievements_total\n";
}



#
# TODO: get achievement details
#

#my $row_count = scalar @rows;
#print "found $row_count rows\n";

if (0) {
	print Dumper($data_out->{$stats_time}), "\n";
	die "how does it look?";
}
if (0) {
	die "debug";
}

# Steam history
write_storable($steam_storable_filename,$data_out);
write_json($steam_json_filename,$data_out);

# game metadata
write_storable($steam_games_storable_filename,$games_data);
write_json($steam_games_json_filename,$games_data);
