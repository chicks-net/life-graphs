#!/usr/bin/perl

use strict;
use warnings;
#use diagnostics;
#use LWP::Simple qw(get);
#use HTML::TreeBuilder;
use Data::Dumper;
#use DateTime;
use JSON;
use Storable qw(nstore retrieve);
#use Readonly;

# verify data directory
my $data_dir = $ENV{STATS_DIR};
die "no STATS_DIR defined" unless defined $data_dir;
die "$data_dir is not a directory" unless -d $data_dir;
chdir($data_dir) or die "somehow failed to chdir($data_dir): $!";

die "generalize";

# retrieve existing data
my $steam_storable_filename = 'steam.storable';
my $steam_json_filename = 'steam.json';
my $data_out = {};

if (-f $steam_storable_filename) {
	print "starting with $data_dir/$steam_storable_filename\n";
	$data_out = retrieve $steam_storable_filename;
}

foreach my $stats_time (sort keys %$data_out) {
	my $snapshot = $data_out->{$stats_time};
	next unless defined $snapshot->{game_detals};
#	print "$stats_time\n";
	my $detals = $snapshot->{game_detals};
	foreach my $game (keys %$detals) {
#		print "\t$game\n";
		my $details = $snapshot->{game_details}->{$game};
		$details->{recent_achievements} = $detals->{$game}->{recent_achievements};
#		print Dumper($details);
	}

	delete $snapshot->{game_detals};
}

if (1) {
	print Dumper($data_out), "\n";
	die "how does it look?";
}

# write Storable
nstore $data_out,$steam_storable_filename;
print "wrote $steam_storable_filename\n";

# write JSON file
my $json_fh;
open($json_fh,">",$steam_json_filename) or die "could not open $steam_json_filename for write: $!";
my $json = JSON->new->allow_nonref;
my $json_out = $json->pretty->canonical->encode($data_out);
print $json_fh $json_out;
close($json_fh);
print "wrote $steam_json_filename\n";
